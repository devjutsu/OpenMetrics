@using Nethereum.Hex.HexConvertors.Extensions
@inject IChain Blockchain

@if (Metric != null)
{
    <div style="margin-top: 1rem; margin-bottom: 1rem;">
        
        <div>Id: @Metric.Id</div>
        <div>CID: @Metric.Cid</div>
        <div>Status: @Metric.Status</div>
        <div>Checksum: @Metric.Checksum.ToHex()</div>
    </div>

    <button class="btn btn-success" @onclick="@(() => Approve(Metric))" disabled=@BtnDisabled>Approve</button>

    <p>&nbsp;</p>
    <HistoryComponent />


    <div style="margin-top: 1rem; margin-bottom: 1rem;">
        <table class="table table-bordered">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Author</th>
                <th scope="col">Status</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var rec in History)
        {
            <tr class="">
                <td scope="row">
                    @rec.Id
                </td>
                <td scope="row">
                    @rec.Author
                </td>
                <td>
                    @rec.StatusText()
                </td>
                @*<td scope="row">
                    @rec.Cid
                </td>*@
            </tr>
        }
        </tbody>
    </table>
    </div>
}

@code {
    [Parameter]
    public Metric Metric { get; set; }
    [Parameter]
    public EventCallback<Metric> OnApprove { get; set; }
    [Parameter]
    public List<HistoryRecordDTO> History { get; set; }

    bool BtnDisabled => Metric.Status == 2;

    async Task Approve(Metric metric)
    {
        await OnApprove.InvokeAsync(metric);
    }

    protected override async Task OnInitializedAsync()
    {
        if(Metric != null)
        {
            Console.WriteLine($"show initialize for: {Metric?.Id}");
            await Blockchain.GetHistoryRecordsCount(Metric.Id);
        }
    }
}
