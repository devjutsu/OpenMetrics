@using Nethereum.Hex.HexConvertors.Extensions
@inject IChain Blockchain

@if (Metric != null)
{
    <div style="margin-top: 1rem; margin-bottom: 1rem;">
        
        <div>Id: @Metric.Id</div>
        <div>CID: @Metric.Cid</div>
        <div>Creator: @Metric.Creator</div>
        <div>Editor: @Metric.Creator</div>
        <div>Approver: @Metric.Approver</div>
        <div>Status: @Metric.Status</div>
        <div>Checksum: @Metric.Checksum.ToHex()</div>
    </div>

    <button class="btn btn-success" @onclick="@(() => Approve(Metric))" disabled=@BtnDisabled>Approve</button>

    <p>&nbsp;</p>
    <HistoryComponent />
}

@code {
    [Parameter]
    public Metric Metric { get; set; }
    [Parameter]
    public EventCallback<Metric> OnApprove { get; set; }
    bool BtnDisabled => Metric.Status == 2;

    async Task Approve(Metric metric)
    {
        await OnApprove.InvokeAsync(metric);
    }

    protected override async Task OnInitializedAsync()
    {
        if(Metric != null)
        {
            Console.WriteLine($"show initialize for: {Metric?.Id}");
            await Blockchain.GetHistoryRecordsCount(Metric.Id);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(Metric != null)
        {
            var count = await Blockchain.GetHistoryRecordsCount(Metric.Id);

            for(ulong i = 0; i < count; i++)
            {
                var rec = await Blockchain.GetHistoryRecord(Metric.Id, i);
                Console.WriteLine($"{rec.Author} : {rec.Status}");
            }

            @*var history = await Blockchain.GetHistory(Metric.Id);
            Console.WriteLine($"Got history records: {history.Count}");
            foreach(var rec in history)
            {
                Console.WriteLine($"{rec.Author} : {rec.Status}");
            }*@
        }
    }
}
