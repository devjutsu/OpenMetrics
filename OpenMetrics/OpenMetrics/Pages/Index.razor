@page "/"
@using Blazored.Toast.Services
@using MetaMask.Blazor
@using OpenMetrics.Services
@inject MetaMaskService Meta
@inject AppState AppState
@inject ClientConfig CFG
@inject IToastService Toast
@inject IJSRuntime JS

<PageTitle>Index</PageTitle>

@code {
    bool Spinning = false;
    bool HasMetaMask = false;
    bool ProperChain = true;

    protected override async Task OnInitializedAsync()
    {
        await Authenticate();
    }

    async Task Authenticate()
    {
        Console.WriteLine("Authenticating...");
        Spinning = true;
        if (!await Meta.HasMetaMask())
        {
            Console.WriteLine("Has no MetaMask");
            HasMetaMask = false;
            StateHasChanged();
        }
        else
        {
            try
            {
                if (!await Meta.IsSiteConnected())
                    await Meta.ConnectMetaMask();
                var userId = await Meta.GetSelectedAddress();
                await GetSelectedNetwork();

                await AppState.Login(this, userId);


            }
            catch (Exception ex)
            {
                //Toast.ShowError($"Auth failed. Please, check your wallet");
            }
        }
        Spinning = false;
    }

    public async Task GetSelectedNetwork()
    {
        var chainInfo = await Meta.GetSelectedChain();

        AppState.SetChain(this, chainInfo.chainId);
        Console.WriteLine($"ChainID: {AppState.ChainId}");
        StateHasChanged();

        if (ProperChain)
        {
            Console.WriteLine($"Authenticated on: {NetworksList.Networks[AppState.ChainId]}");
        }
        else
        {
            Toast.ShowWarning($"Please, connect to chain: {NetworksList.Networks[CFG.NetworkId]}");
        }
    }
}