@using Nethereum.Hex.HexConvertors.Extensions
@inject IChain Blockchain

@if (Metric != null)
{
    <div style="margin-top: 1rem; margin-bottom: 1rem;">
        
        <div>Id: @Metric.Id</div>
        <div>CID: @Metric.Cid</div>
        <div>Creator: @Metric.Creator</div>
        <div>Editor: @Metric.Creator</div>
        <div>Approver: @Metric.Approver</div>
        <div>Status: @Metric.Status</div>
        <div>Checksum: @Metric.Checksum.ToHex()</div>
    </div>

    <button class="btn btn-success" @onclick="@(() => Approve(Metric))">Approve</button>

    <p>&nbsp;</p>
    <HistoryComponent />
}

@code {
    [Parameter]
    public Metric Metric { get; set; }
    [Parameter]
    public EventCallback<Metric> OnApprove { get; set; }

    async Task Approve(Metric metric)
    {
        await OnApprove.InvokeAsync(metric);
    }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"showing info: {Metric?.Id}");
        if(Metric != null)
        {
            Console.WriteLine("show metric");
            await Blockchain.GetTransactions(Metric.Id);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine($"render: {Metric?.Id}");
        if(Metric != null)
        {
            Console.WriteLine("show metric");
            await Blockchain.GetTransactions(Metric.Id);
        }
    }
}
