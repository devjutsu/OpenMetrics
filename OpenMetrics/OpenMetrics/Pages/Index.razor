@page "/"
@using Blazored.Toast.Services
@using MetaMask.Blazor
@using MetaMask.Blazor.Enums
@using OpenMetrics.Components
@using OpenMetrics.Services
@using OpenMetrics.ViewModels
@inject MetaMaskService Meta
@inject AppState AppState
@inject ClientConfig CFG
@inject IChain Blockchain
@inject IToastService Toast
@inject IJSRuntime JS
@implements IDisposable

<PageTitle>Index</PageTitle>

@if (@Spinning)
{
    <Spinner />
}

@if (!AppState.IsAuthenticated)
{
    <div>
        <div class="d-flex justify-content-center">
            <button class="btn btn-primary" @onclick="(() => Authenticate())" disabled="@(!HasMetaMask)">
                Authenticate
            </button>
        </div>

        @if (!HasMetaMask)
        {
            <div class="d-flex justify-content-center vertical-space darktext">
                Please authenticate with <span>&nbsp;</span> <a href="https://metamask.io" target="_blank"> MetaMask </a>.
            </div>
        }
    </div>
}
else if (!ProperChain)
{
    <div>Please, select <span style="color: #5a349aff; font-weight:bold">@NeededChain</span> chain</div>
    <button class="btn btn-primary" @onclick="@(() => SwitchChain())">Open MetaMask</button>
}
else
{
    <ListMetricsComponent />

    @if (AddingMetrics)
    {
        <AddMetricComponent DoneAdding=DoneAdding />
    }
    else
    {
        <div style="margin-top: 1rem; margin-bottom: 1rem;">
            <button class="btn btn-primary" @onclick="@(() => OpenAddMetric())"><span class="oi oi-plus" style="margin-right:.5rem; font-size:smaller;"></span>Add Metric</button>
        </div>
    }

    <ListMetricsComponent Metrics=AppState.Metrics OnSelect=SelectMetric />
    
    <ShowMetricComponent Metric=AppState.SelectedMetric OnApprove=Approve />

    <button class="btn btn-warning" @onclick="@(() => GetApprovedMetrics())">Get Approved Metrics</button>
    @foreach(var item in AppState.ApprovedIds)
    {
        <div>@item</div>
    }
}

@code {
    bool Spinning = false;
    bool HasMetaMask = false;
    bool ProperChain => AppState.ChainId == CFG.NetworkId;
    string NeededChain => NetworksList.Networks[CFG.NetworkId];
    bool AddingMetrics = false;

    protected override async Task OnInitializedAsync()
    {
        HasMetaMask = await Meta.HasMetaMask();
        if (HasMetaMask)
            await Meta.ListenToEvents();

        bool isSiteConnected = await Meta.IsSiteConnected();
        if (isSiteConnected)
        {
            await GetSelectedNetwork();
        }

        MetaMaskService.AccountChangedEvent += MetaMaskService_AccountChangedEvent;
        MetaMaskService.ChainChangedEvent += MetaMaskService_ChainChangedEvent;


        if (!await Meta.IsSiteConnected())
            await Meta.ConnectMetaMask();
        var userId = await Meta.GetSelectedAddress();
        if (!string.IsNullOrEmpty(userId))
        {
            await AppState.Login(this, userId);
        }

        var metricsCount = (ulong)(await Blockchain.MetricsCount());
        AppState.SetMetricCount(this, metricsCount);

        await GetApprovedCount();

        if (AppState.MetricsCount > 0)
        {
            await GetAllMetrics();
        }
    }

    private async Task MetaMaskService_ChainChangedEvent((long, Chain) arg)
    {
        await GetSelectedNetwork();
    }

    private async Task MetaMaskService_AccountChangedEvent(string arg)
    {
        await Authenticate();
    }

    async Task Authenticate()
    {
        Console.WriteLine("Authenticating...");
        Spinning = true;
        if (!await Meta.HasMetaMask())
        {
            Console.WriteLine("Has no MetaMask");
            HasMetaMask = await Meta.HasMetaMask();
            StateHasChanged();
        }
        else
        {
            try
            {
                if (!await Meta.IsSiteConnected())
                    await Meta.ConnectMetaMask();
                var userId = await Meta.GetSelectedAddress();
                await GetSelectedNetwork();
                HasMetaMask = true;
                await AppState.Login(this, userId);
            }
            catch (Exception ex)
            {
                Toast.ShowError($"Auth failed. Please, check your wallet");
            }
        }
        Spinning = false;
    }

    public async Task GetSelectedNetwork()
    {
        Spinning = true;
        var chainInfo = await Meta.GetSelectedChain();

        AppState.SetChain(this, chainInfo.chainId);
        Console.WriteLine($"Network id: {AppState.ChainId}");

        if (ProperChain)
        {
            Console.WriteLine($"Authenticated on: {NetworksList.Networks[AppState.ChainId]}");
        }
        else
        {
            Toast.ShowWarning($"Please, connect to chain: {NetworksList.Networks[CFG.NetworkId]}");
        }
        Spinning = false;
        StateHasChanged();
    }

    async Task SwitchChain()
    {
        var toChain = "0x" + CFG.NetworkId.ToString("X");
        await JS.InvokeVoidAsync("switchChain", toChain);
    }

    async Task OpenAddMetric()
    {
        AddingMetrics = true;
    }

    async Task DoneAdding(Metric metric)
    {
        Spinning = true;
        try
        {
            var added = await Blockchain.SubmitMetric(metric);

            var metricsCount = AppState.MetricsCount;
            metric.Id = ++metricsCount;
            AppState.SetMetricCount(this, metricsCount);

            Console.WriteLine($"Added: {added}");
            if (!string.IsNullOrEmpty(added))
            {
                metric = await Blockchain.GetMetric(metric.Id);
                AppState.AddMetric(this, metric);
            }
            AddingMetrics = false;
        }
        catch (Exception ex)
        {
            Toast.ShowError($"hz: {ex.Message}");
        }
        Spinning = false;
    }

    async Task GetAllMetrics()
    {
        AppState.SetMetrics(this, new List<Metric>());
        AppState.SetSelectedMetric(this, null);

        for (ulong i = 1; i <= AppState.MetricsCount; i++)
        {
            var item = await Blockchain.GetMetric(i);
            AppState.AddMetric(this, item);
            StateHasChanged();
        }
    }

    async Task SelectMetric(Metric m)
    {
        AppState.SetSelectedMetric(this, m);
        StateHasChanged();
    }

    async Task Approve(Metric m)
    {
        Spinning = true;
        await Blockchain.ApproveMetric(m.Id);
        Spinning = false;
        await GetAllMetrics();
        await GetApprovedCount();
    }

    async Task GetApprovedCount()
    {
        Spinning = true;
        var approvedCount = await Blockchain.ApprovedCount();
        AppState.SetApprovedCount(this, (ulong)approvedCount);
        Spinning = false;
    }

    async Task GetApprovedMetrics()
    {
        var approvedIds = await Blockchain.GetApprovedMetrics();
        AppState.SetApprovedMetricIds(this, approvedIds);
    }

    // ----
    protected override void OnInitialized()
    {
        AppState.Statechanged += async (Source, Property) => await AppState_StateChanged(Source, Property);
    }

    private async Task AppState_StateChanged(ComponentBase source, string Property)
    {
        if (source != this) await InvokeAsync(StateHasChanged);
    }

    void IDisposable.Dispose()
    {
        AppState.Statechanged -= async (Source, Property) => await AppState_StateChanged(Source, Property);
    }
}
